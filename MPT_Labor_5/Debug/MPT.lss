
MPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001e1  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fc  00000000  00000000  000003e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021c  00000000  00000000  000004e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b8  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  7a:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <A_5_1_1>:

//##############################################################################

// A_5_1_1: Timer0 als Frequenzgenerator mit fester Frequenz.
void A_5_1_1(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	// IHR_CODE_HIER ...
	LED_DDR = 0xff;
  8a:	84 e3       	ldi	r24, 0x34	; 52
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	fc 01       	movw	r30, r24
  92:	20 83       	st	Z, r18
	LED_PORT = 0x01;
  94:	85 e3       	ldi	r24, 0x35	; 53
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	
	FG_DDR = 0x08;
  9e:	87 e3       	ldi	r24, 0x37	; 55
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	28 e0       	ldi	r18, 0x08	; 8
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	
	OCR0 = 0x80;
  a8:	8c e5       	ldi	r24, 0x5C	; 92
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	20 e8       	ldi	r18, 0x80	; 128
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	TCCR0 = 0b01001101;
  b2:	83 e5       	ldi	r24, 0x53	; 83
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2d e4       	ldi	r18, 0x4D	; 77
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	TCNT0 = 0;
  bc:	82 e5       	ldi	r24, 0x52	; 82
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	fc 01       	movw	r30, r24
  c2:	10 82       	st	Z, r1
	
	while(1){
		if(BIT_IS_SET(TIFR, OCF0)){
  c4:	88 e5       	ldi	r24, 0x58	; 88
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	88 2f       	mov	r24, r24
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	82 70       	andi	r24, 0x02	; 2
  d2:	99 27       	eor	r25, r25
  d4:	89 2b       	or	r24, r25
  d6:	09 f4       	brne	.+2      	; 0xda <A_5_1_1+0x58>
			break;
		}
	}
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <A_5_1_1+0x42>
	TCCR0 = 0b01001101;
	TCNT0 = 0;
	
	while(1){
		if(BIT_IS_SET(TIFR, OCF0)){
			break;
  da:	00 00       	nop
		}
	}
}
  dc:	00 00       	nop
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <main>:

#include "Labor_5/MPT_LAB_5_1.h"
#include "Labor_5/MPT_LAB_5_2.h"

int main(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  // Aufgabe A_5_1: Timer0 als Frequenzgenerator
  // A_5_1_1: Timer0 als Frequenzgenerator mit fester Frequenz.
  // A_5_1_2: Timer0 als Frequenzgenerator mit fester Frequenz und Terminalausgabe.
  // A_5_1_3: Timer0 als Frequenzgenerator mit einstellbarer Frequenz und Terminalausgabe.
  //------------------------------------------------------------------------------
  A_5_1_1();
  ec:	0e 94 41 00 	call	0x82	; 0x82 <A_5_1_1>
	
	
  while(1)
  {
      //TODO:: Please write your application code 
  }
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0xc>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
